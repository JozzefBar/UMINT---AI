clear; clc; close all;

% --- Načítanie dát ---
load datapiscisla_all  % očakáva XDataall

% Vstupy
X = XDataall;

% Automatické vytvorenie výstupných tried
% Predpoklad: čísla 0 až 9 sa opakujú v poradí, rovnomerne
numClasses = 10;
samplesPerClass = size(X, 2) / numClasses;
TDataall = repelem(0:9, samplesPerClass);

% Prevod na one-hot výstupy
T = full(ind2vec(TDataall + 1));  % +1 kvôli MATLABovskému 1-based indexu

% Počet behov pre validáciu
repeats = 5;
accTrain = zeros(1, repeats);
accTest = zeros(1, repeats);
nets = cell(1, repeats);
bestAcc = -inf;

% --- Opakovaný tréning pre rôzne rozdelenia dát ---
for run = 1:repeats
    % Rozdelenie dát (60% tréning, 20% validácia, 20% test)
    N = size(X,2);
    idx = randperm(N);
    trainInd = idx(1:round(0.6*N));
    valInd = idx(round(0.6*N)+1:round(0.8*N));
    testInd = idx(round(0.8*N)+1:end);

    % Vytvorenie siete
    neurons = 150;  % môžeš ladiť
    net = patternnet(neurons);

    net.divideFcn = 'divideind';
    net.divideParam.trainInd = trainInd;
    net.divideParam.valInd = valInd;
    net.divideParam.testInd = testInd;

    % Parametre učenia
    net.trainParam.goal = 10^-2;
    net.trainParam.epochs = 300;

    % Trénovanie
    [net, tr] = train(net, X, T);

    % Výstupy siete
    Y = net(X);

    % Vyhodnotenie
    [~, predictedTrain] = max(Y(:,trainInd));
    [~, predictedTest] = max(Y(:,testInd));
    [~, trueTrain] = max(T(:,trainInd));
    [~, trueTest] = max(T(:,testInd));

    accTrain(run) = sum(predictedTrain == trueTrain) / length(trueTrain);
    accTest(run) = sum(predictedTest == trueTest) / length(trueTest);

    % Najlepšia sieť
    if accTest(run) > bestAcc
        bestAcc = accTest(run);
        bestNet = net;
        bestTR = tr;
        bestTestInd = testInd;
        bestTrainInd = trainInd;
        bestY = Y;
        bestRun = run;
    end
end

% --- Výsledky ---
fprintf('\n--- Výsledky po %d behoch ---\n', repeats);
fprintf('Testovacia presnosť: MIN %.2f %% | MAX %.2f %% | PRIEMER %.2f %%\n', ...
    min(accTest)*100, max(accTest)*100, mean(accTest)*100);
fprintf('Trénovacia presnosť: MIN %.2f %% | MAX %.2f %% | PRIEMER %.2f %%\n', ...
    min(accTrain)*100, max(accTrain)*100, mean(accTrain)*100);

% --- Výstupy najlepšej siete ---
fprintf('\n--- Najlepšia sieť ---\n');
figure; plotconfusion(T(:,bestTrainInd), bestY(:,bestTrainInd), 'Train');
figure; plotconfusion(T(:,bestTestInd), bestY(:,bestTestInd), 'Test');
figure; plotperform(bestTR);

% --- Testovanie vzoriek ---
fprintf('\n--- Testovanie vzoriek ---\n');
sampleIdx = [];
for i = 0:9
    sampleIdx = [sampleIdx, find(TDataall == i, 1), find(TDataall == i, 2, 'last')];  % 2 kusy z každej triedy
end

sampleInput = X(:, sampleIdx);
sampleOutput = bestNet(sampleInput);
[~, predicted] = max(sampleOutput);

fprintf('Skutočné čísla:     %s\n', num2str(TDataall(sampleIdx)));
fprintf('Predikované čísla:  %s\n', num2str(predicted - 1));
fprintf('Správne klasifikovaných: %d z %d\n', sum(predicted - 1 == TDataall(sampleIdx)), length(sampleIdx));
